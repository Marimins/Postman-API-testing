{
	"info": {
		"_postman_id": "2d117c7e-a1db-4c90-9e0a-c531281a176c",
		"name": "HW2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24112551"
	},
	"item": [
		{
			"name": "WQ1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"     pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "WQ2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"let req_f = request.data;\r",
							"let req_name = req_f.name;\r",
							"let resp_name = resp_f.name;\r",
							"\r",
							"console.log(req_name)\r",
							"console.log(resp_name)\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"     pm.expect(resp_name).to.eql(\"Mari\");\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let req_age = req_f.age;\r",
							"let resp_age = resp_f.age;\r",
							"\r",
							"console.log(resp_age)\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"     pm.expect(resp_age).to.eql(\"33\");\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let req_salary = +req_f.salary;\r",
							"let resp_salary = +resp_f.salary;\r",
							"\r",
							"console.log(resp_salary)\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"     pm.expect(resp_salary).to.eql(1500);\r",
							"});\r",
							"//7. Спарсить request.\r",
							"let req_body = request.body;\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name_req/resp\", function () {\r",
							"     pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age_req/resp\", function () {\r",
							"     pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary_req/resp\", function () {\r",
							"     pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_for_1_5_years = req_f.salary*4;\r",
							"let u_salary_1_5_year = resp_f.family.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"     pm.expect(salary_for_1_5_years).to.eql(u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mari",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "WQ3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let user_info = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var user_info_request = {};\r",
							"pm.request.url.query.all().forEach((param) => { user_info_request[param.key] = param.value});\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"pm.test(\"req_name=resp_name\", function () {\r",
							"     pm.expect(user_info.name).to.eql(\"Mari\");\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.\r",
							"pm.test(\"req_age=resp_age\", function () {\r",
							"     pm.expect(user_info.age).to.eql(\"33\");\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.\r",
							"pm.test(\"req_salary=resp_salary\", function () {\r",
							"     pm.expect(user_info.salary).to.eql(1500);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(user_info.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_name\", function () {\r",
							"     pm.expect(user_info.family.pets.dog.name).to.exist;\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", function () {\r",
							"     pm.expect(user_info.family.pets.dog.age).to.exist;\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_name_Luky\", function () {\r",
							"     pm.expect(user_info.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age_4\", function () {\r",
							"     pm.expect(user_info.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Mari&age=33&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mari"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "WQ4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var user_info = pm.response.json();\r",
							"console.log(\"user_info = \", + user_info);\r",
							"// 4. Спарсить request.\r",
							"var user_info_request = {};\r",
							"pm.request.url.query.all().forEach((param) => { user_info_request[param.key] = param.value });\r",
							"console.log(\"user_info_request = \" + user_info_request);\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"pm.test(\"name from response = name from request\", function () { \r",
							"     pm.expect(user_info.name).to.eql(user_info_request.name);\r",
							"     });\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.\r",
							"var user_info_request_age = parseInt(user_info_request.age)\r",
							"pm.test(\"age_response = age_request\", function () { \r",
							"     pm.expect(user_info.age).to.eql(user_info_request_age);\r",
							"     }); \r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"salary from request = \", user_info_request.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary from response = \", user_info.salary);  \r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"0.salary from response = \", user_info.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"1.salary from response = \", user_info.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"2.salary from response = \", user_info.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.\r",
							"var user_info_request_salary = parseInt(user_info_request.salary);\r",
							"pm.test(\"0.salary=req.salary\", function () { \r",
							"     pm.expect(user_info.salary[0]).to.eql(user_info_request_salary);\r",
							"     }); \r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.\r",
							"var user_info_response_salary_1 = parseInt(user_info.salary[1])\r",
							"pm.test(\"User_info_response_salary_1\", function () {\r",
							"     pm.expect(user_info_response_salary_1).to.eql(user_info_request_salary * 2);\r",
							"});\r",
							"console.log(\"user_info_response_salary_1 = \", user_info_response_salary_1)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.\r",
							"var user_info_response_salary_2 = parseInt(user_info.salary[2]);\r",
							"pm.test(\"user_info_response_salary_2\", function () {\r",
							"     pm.expect(user_info_response_salary_2).to.eql(user_info_request_salary * 3);\r",
							"     });\r",
							"console.log(\"user_info_response_salary_2 = \", user_info_response_salary_2)\r",
							"//15. Создать в окружении переменную name - сделано в интерфейсе Postman\r",
							"// 16. Создать в окружении переменную age  - сделано в интерфейсе Postman\r",
							"// 17. Создать в окружении переменную salary - сделано в интерфейсе Postman\r",
							"// 18. Передать в окружение переменную name\r",
							"let env_name = user_info.name\r",
							"pm.environment.set(\"name\", env_name);\r",
							"// 19. Передать в окружение переменную age\r",
							"let env_age = user_info.age\r",
							"pm.environment.set(\"age\", env_age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"let env_salary = user_info.salary\r",
							"pm.environment.set(\"salaries\", env_salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let step;\r",
							"for (step = 0; step < user_info.salary.length; step++) {\r",
							"     console.log(step,'salary =', user_info.salary[step]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Mari&age=33&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"",
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mari"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "WQ5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request   - {{name}} вставлено в body form-data запроса\r",
							"// 2. Вставить параметр age из окружения в age          - {{age}} вставлено в body form-data запроса\r",
							"// 3. Вставить параметр name из окружения в name        - {{salary}} вставлено в body form-data запроса\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var user_info = JSON.parse(responseBody);\r",
							"console.log(\"user_info = \", user_info);\r",
							"// 7. Спарсить request.\r",
							"var user_info_request = request.data\r",
							"console.log(\"user_info_request = \", user_info_request)\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Parameter 'start_qa_salary' exist in response\", function () {\r",
							"     pm.expect(user_info.start_qa_salary).to.exist;\r",
							"     });\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Parameter 'qa_salary_after_6_months' exist in response\", function () {\r",
							"     pm.expect(user_info.qa_salary_after_6_months).to.exist;\r",
							"     });\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Parameter 'qa_salary_after_12_months' exist in response\", function () {\r",
							"     pm.expect(user_info.qa_salary_after_12_months).to.exist;\r",
							"     });\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Parameter 'qa_salary_after_1.5_year' exist in response\", function () {\r",
							"     pm.expect(user_info).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"     });\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Parameter 'qa_salary_after_3.5_years' exist in response\", function () {\r",
							"     pm.expect(user_info).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"     });\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Parameter 'person' exist in response\", function () {\r",
							"     pm.expect(user_info).to.have.property(\"person\");\r",
							"     });\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.\r",
							"var user_info_request_salary = parseInt (user_info_request.salary)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"     pm.expect(user_info.start_qa_salary).to.eql(1500);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.\r",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {\r",
							"     pm.expect(user_info.qa_salary_after_6_months).to.eql(1500*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.\r",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {\r",
							"     pm.expect(user_info.qa_salary_after_12_months).to.eql(1500*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.\r",
							"pm.test(\"qa_salary_after_1.5_year=salary*3.3\", function () {\r",
							"     pm.expect(user_info[\"qa_salary_after_1.5_year\"]).to.eql(1500*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.\r",
							"pm.test(\"qa_salary_after_3.5_years=salary*3.8\", function () {\r",
							"     pm.expect(user_info[\"qa_salary_after_3.5_years\"]).to.eql(1500*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.\r",
							"pm.test(\"Parameter person.u_name == salary from request\", function () {\r",
							"     pm.expect(user_info.person.u_name[1]).to.eql(user_info_request_salary);\r",
							"     });\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.\r",
							"pm.test(\"Parameter person.u_age == age from request\", function () {\r",
							"     pm.expect(user_info.person.u_age).to.eql(33);\r",
							"     });\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.\r",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {\r",
							"     pm.expect(user_info.person.u_salary_5_years).to.eql(1500*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in user_info.person) {\r",
							"     console.log(key, user_info.person[key]);\r",
							"     };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "WQ5 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
