{
	"info": {
		"_postman_id": "a59c0f8e-9625-405d-a98b-7eed43c34553",
		"name": "HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24112551"
	},
	"item": [
		{
			"name": "Pm1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_f = pm.response.json();\r",
							"let auth_token = String(resp_f.token);\r",
							"console.log(auth_token)\r",
							"pm.environment.set(\"token\", auth_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Mariam",
							"type": "text"
						},
						{
							"key": "password",
							"value": "\"5566778899\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pm2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"let reqBody = JSON.parse(pm.request.body);\r",
							"console.log(\"request:\", reqBody);\r",
							"let resp_f = pm.response.json();\r",
							"console.log(\"response:\", resp_f);\r",
							"//2) Проверка структуры json в ответе\r",
							"pm.test(\"Check_person\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"pm.test(\"Check_age\", function () {\r",
							"     pm.expect(resp_f.person).to.have.property(\"u_age\");\r",
							"});\r",
							"pm.test(\"Check_age35\", function () {\r",
							"     pm.expect(resp_f.person.u_age).to.eql(35);\r",
							"});\r",
							"pm.test(\"Check_name\", function () {\r",
							"     pm.expect(resp_f.person).to.have.property(\"u_name\");\r",
							"});\r",
							"pm.test(\"Check_name[0]\", function () {\r",
							"     pm.expect(resp_f.person.u_name[0]).to.eql(\"Mariam\");\r",
							"});\r",
							"pm.test(\"Check_name[1]\", function () {\r",
							"     pm.expect(resp_f.person.u_name[1]).to.eql(2000);\r",
							"});\r",
							"pm.test(\"Check_name[2]\", function () {\r",
							"     pm.expect(resp_f.person.u_name[2]).to.eql(35);\r",
							"});\r",
							"pm.test(\"Check_u_salary_1_5_year\", function () {\r",
							"     pm.expect(resp_f.person).to.have.property(\"u_salary_1_5_year\");\r",
							"});\r",
							"pm.test(\"Check_u_salary_1_5_year=8000\", function () {\r",
							"     pm.expect(resp_f.person.u_salary_1_5_year).to.eql(8000);\r",
							"});\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"pm.test(\"Check_qa_salary_after_6_months\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Multiple_start_qa_salary\", function () {\r",
							"     pm.expect(resp_f.start_qa_salary).to.eql(reqBody.salary);\r",
							"});\r",
							"pm.test(\"Multiple_qa_salary_after_6_months\", function () {\r",
							"     pm.expect(resp_f.qa_salary_after_6_months).to.eql(reqBody.salary*2);\r",
							"});\r",
							"pm.test(\"Multiple_qa_salary_after_12_months\", function () {\r",
							"     pm.expect(resp_f.qa_salary_after_12_months).to.eql(reqBody.salary*2.9);\r",
							"});\r",
							"pm.test(\"Multiple_u_salary_1_5_year\", function () {\r",
							"     pm.expect(resp_f.person.u_salary_1_5_year).to.eql(reqBody.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 35,\r\n    \"salary\": 2000,\r\n    \"name\": \"Mariam\",\r\n    \"auth_token\": \"/s34lfgbj/Mariam/jjd909/39705kjkWpqc5168\\\"5566778899\\\"390132evny\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pm3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"let req_f = request.data;\r",
							"console.log(req_f);\r",
							"let resp_f = pm.response.json();\r",
							"console.log(resp_f);\r",
							"pm.test(\"Check_age\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"age\");\r",
							"});\r",
							"pm.test(\"Check_name\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"Check_salary\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"salary\");\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Check_salary[0]\", function () {\r",
							"     pm.expect(resp_f.salary[0]).to.eql(+req_f.salary);\r",
							"});\r",
							"pm.test(\"Check_salary[1]\", function () {\r",
							"     pm.expect(+resp_f.salary[1]).to.eql(req_f.salary*2);\r",
							"});\r",
							"pm.test(\"Check_salary[2]\", function () {\r",
							"     pm.expect(+resp_f.salary[2]).to.eql(req_f.salary*3);\r",
							"});\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Check_salary[2]>[1]\", function () {\r",
							"     pm.expect(+resp_f.salary[2]).to.be.above(+resp_f.salary[1]);\r",
							"});\r",
							"pm.test(\"Check_salary[2]>[0]\", function () {\r",
							"     pm.expect(+resp_f.salary[2]).to.be.above(resp_f.salary[0]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mariam",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pm4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let req_f = request.data;\r",
							"console.log (req_f);\r",
							"let resp_f = pm.response.json();\r",
							"console.log(\"resp_f = \", resp_f);\r",
							"pm.test(\"check_age\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"age\");\r",
							"});\r",
							"pm.test(\"check_dailyfood\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"daily_food\");\r",
							"});\r",
							"pm.test(\"check_dailysleep\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"daily_sleep\");\r",
							"});\r",
							"pm.test(\"check_name\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"name\");\r",
							"});\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"check_weight1\", function () {\r",
							"    pm.expect(resp_f.daily_food).to.eql(req_f.weight*0.012);\r",
							"});\r",
							"pm.test(\"check_weight2\", function () {\r",
							"    pm.expect(resp_f.daily_sleep).to.eql(req_f.weight*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "60",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pm5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let req_f = request.data;\r",
							"console.log(req_f);\r",
							"let resp_f = pm.response.json();\r",
							"console.log(\"response =\",resp_f)\r",
							"pm.test(\"check_age\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"age\");\r",
							"});\r",
							"pm.test(\"check_family\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"family\");\r",
							"});\r",
							"pm.test(\"check_children\", function () {\r",
							"     pm.expect(resp_f.family).to.have.property(\"children\");\r",
							"});\r",
							"pm.test(\"check_u_salary_1_5_year\", function () {\r",
							"     pm.expect(resp_f.family).to.have.property(\"u_salary_1_5_year\");\r",
							"});\r",
							"pm.test(\"check_name\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"name\");\r",
							"});\r",
							"pm.test(\"check_salary\", function () {\r",
							"     pm.expect(resp_f).to.have.property(\"salary\");\r",
							"});\r",
							"// 3) Проверить что значение поля name = значению переменной name из окружения\r",
							"let nameFromEnvironment = pm.environment.get(\"name\");\r",
							"console.log(\"The value of 'name' field in the response matches the value of 'name' variable in the environment.\");\r",
							"console.log(\"The value of 'name' field in the response does not match the value of 'name' variable in the environment.\");\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"check_age_eql\", function () {\r",
							"     pm.expect(resp_f.age).to.eql(req_f.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pm6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							" var jsonData = pm.response.json();\r",
							"var randomIndex = Math.floor(Math.random() * jsonData.length);\r",
							"console.log(randomIndex);\r",
							"pm.environment.set(\"randomCurID\", jsonData[randomIndex].Cur_ID.toString());\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pm7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"pm.test(\"Json1\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"Cur_Abbreviation\");\r",
							"});\r",
							"pm.test(\"Json2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"Cur_ID\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{randomCurID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}